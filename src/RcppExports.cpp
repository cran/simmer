// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// Simulator__new
SEXP Simulator__new(const std::string& name, bool verbose);
RcppExport SEXP _simmer_Simulator__new(SEXP nameSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::string& >::type name(nameSEXP);
    Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(Simulator__new(name, verbose));
    return rcpp_result_gen;
END_RCPP
}
// reset_
void reset_(SEXP sim_);
RcppExport SEXP _simmer_reset_(SEXP sim_SEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type sim_(sim_SEXP);
    reset_(sim_);
    return R_NilValue;
END_RCPP
}
// now_
double now_(SEXP sim_);
RcppExport SEXP _simmer_now_(SEXP sim_SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type sim_(sim_SEXP);
    rcpp_result_gen = Rcpp::wrap(now_(sim_));
    return rcpp_result_gen;
END_RCPP
}
// peek_
DataFrame peek_(SEXP sim_, int steps);
RcppExport SEXP _simmer_peek_(SEXP sim_SEXP, SEXP stepsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type sim_(sim_SEXP);
    Rcpp::traits::input_parameter< int >::type steps(stepsSEXP);
    rcpp_result_gen = Rcpp::wrap(peek_(sim_, steps));
    return rcpp_result_gen;
END_RCPP
}
// stepn_
void stepn_(SEXP sim_, unsigned int n);
RcppExport SEXP _simmer_stepn_(SEXP sim_SEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type sim_(sim_SEXP);
    Rcpp::traits::input_parameter< unsigned int >::type n(nSEXP);
    stepn_(sim_, n);
    return R_NilValue;
END_RCPP
}
// run_
void run_(SEXP sim_, double until);
RcppExport SEXP _simmer_run_(SEXP sim_SEXP, SEXP untilSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type sim_(sim_SEXP);
    Rcpp::traits::input_parameter< double >::type until(untilSEXP);
    run_(sim_, until);
    return R_NilValue;
END_RCPP
}
// add_generator_
bool add_generator_(SEXP sim_, const std::string& name_prefix, const Environment& trj, const Function& dist, int mon, int priority, int preemptible, bool restart);
RcppExport SEXP _simmer_add_generator_(SEXP sim_SEXP, SEXP name_prefixSEXP, SEXP trjSEXP, SEXP distSEXP, SEXP monSEXP, SEXP prioritySEXP, SEXP preemptibleSEXP, SEXP restartSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type sim_(sim_SEXP);
    Rcpp::traits::input_parameter< const std::string& >::type name_prefix(name_prefixSEXP);
    Rcpp::traits::input_parameter< const Environment& >::type trj(trjSEXP);
    Rcpp::traits::input_parameter< const Function& >::type dist(distSEXP);
    Rcpp::traits::input_parameter< int >::type mon(monSEXP);
    Rcpp::traits::input_parameter< int >::type priority(prioritySEXP);
    Rcpp::traits::input_parameter< int >::type preemptible(preemptibleSEXP);
    Rcpp::traits::input_parameter< bool >::type restart(restartSEXP);
    rcpp_result_gen = Rcpp::wrap(add_generator_(sim_, name_prefix, trj, dist, mon, priority, preemptible, restart));
    return rcpp_result_gen;
END_RCPP
}
// add_resource_
bool add_resource_(SEXP sim_, const std::string& name, int capacity, int queue_size, bool mon, bool preemptive, const std::string& preempt_order, bool queue_size_strict);
RcppExport SEXP _simmer_add_resource_(SEXP sim_SEXP, SEXP nameSEXP, SEXP capacitySEXP, SEXP queue_sizeSEXP, SEXP monSEXP, SEXP preemptiveSEXP, SEXP preempt_orderSEXP, SEXP queue_size_strictSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type sim_(sim_SEXP);
    Rcpp::traits::input_parameter< const std::string& >::type name(nameSEXP);
    Rcpp::traits::input_parameter< int >::type capacity(capacitySEXP);
    Rcpp::traits::input_parameter< int >::type queue_size(queue_sizeSEXP);
    Rcpp::traits::input_parameter< bool >::type mon(monSEXP);
    Rcpp::traits::input_parameter< bool >::type preemptive(preemptiveSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type preempt_order(preempt_orderSEXP);
    Rcpp::traits::input_parameter< bool >::type queue_size_strict(queue_size_strictSEXP);
    rcpp_result_gen = Rcpp::wrap(add_resource_(sim_, name, capacity, queue_size, mon, preemptive, preempt_order, queue_size_strict));
    return rcpp_result_gen;
END_RCPP
}
// add_resource_manager_
bool add_resource_manager_(SEXP sim_, const std::string& name, const std::string& param, const std::vector<double>& intervals, const std::vector<int>& values, int period);
RcppExport SEXP _simmer_add_resource_manager_(SEXP sim_SEXP, SEXP nameSEXP, SEXP paramSEXP, SEXP intervalsSEXP, SEXP valuesSEXP, SEXP periodSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type sim_(sim_SEXP);
    Rcpp::traits::input_parameter< const std::string& >::type name(nameSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type param(paramSEXP);
    Rcpp::traits::input_parameter< const std::vector<double>& >::type intervals(intervalsSEXP);
    Rcpp::traits::input_parameter< const std::vector<int>& >::type values(valuesSEXP);
    Rcpp::traits::input_parameter< int >::type period(periodSEXP);
    rcpp_result_gen = Rcpp::wrap(add_resource_manager_(sim_, name, param, intervals, values, period));
    return rcpp_result_gen;
END_RCPP
}
// get_mon_arrivals_
DataFrame get_mon_arrivals_(SEXP sim_, bool per_resource, bool ongoing);
RcppExport SEXP _simmer_get_mon_arrivals_(SEXP sim_SEXP, SEXP per_resourceSEXP, SEXP ongoingSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type sim_(sim_SEXP);
    Rcpp::traits::input_parameter< bool >::type per_resource(per_resourceSEXP);
    Rcpp::traits::input_parameter< bool >::type ongoing(ongoingSEXP);
    rcpp_result_gen = Rcpp::wrap(get_mon_arrivals_(sim_, per_resource, ongoing));
    return rcpp_result_gen;
END_RCPP
}
// get_mon_attributes_
DataFrame get_mon_attributes_(SEXP sim_);
RcppExport SEXP _simmer_get_mon_attributes_(SEXP sim_SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type sim_(sim_SEXP);
    rcpp_result_gen = Rcpp::wrap(get_mon_attributes_(sim_));
    return rcpp_result_gen;
END_RCPP
}
// get_mon_resources_
DataFrame get_mon_resources_(SEXP sim_);
RcppExport SEXP _simmer_get_mon_resources_(SEXP sim_SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type sim_(sim_SEXP);
    rcpp_result_gen = Rcpp::wrap(get_mon_resources_(sim_));
    return rcpp_result_gen;
END_RCPP
}
// get_n_generated_
int get_n_generated_(SEXP sim_, const std::string& name);
RcppExport SEXP _simmer_get_n_generated_(SEXP sim_SEXP, SEXP nameSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type sim_(sim_SEXP);
    Rcpp::traits::input_parameter< const std::string& >::type name(nameSEXP);
    rcpp_result_gen = Rcpp::wrap(get_n_generated_(sim_, name));
    return rcpp_result_gen;
END_RCPP
}
// get_name_
std::string get_name_(SEXP sim_);
RcppExport SEXP _simmer_get_name_(SEXP sim_SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type sim_(sim_SEXP);
    rcpp_result_gen = Rcpp::wrap(get_name_(sim_));
    return rcpp_result_gen;
END_RCPP
}
// get_attribute_
NumericVector get_attribute_(SEXP sim_, const std::vector<std::string>& keys, bool global);
RcppExport SEXP _simmer_get_attribute_(SEXP sim_SEXP, SEXP keysSEXP, SEXP globalSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type sim_(sim_SEXP);
    Rcpp::traits::input_parameter< const std::vector<std::string>& >::type keys(keysSEXP);
    Rcpp::traits::input_parameter< bool >::type global(globalSEXP);
    rcpp_result_gen = Rcpp::wrap(get_attribute_(sim_, keys, global));
    return rcpp_result_gen;
END_RCPP
}
// get_prioritization_
IntegerVector get_prioritization_(SEXP sim_);
RcppExport SEXP _simmer_get_prioritization_(SEXP sim_SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type sim_(sim_SEXP);
    rcpp_result_gen = Rcpp::wrap(get_prioritization_(sim_));
    return rcpp_result_gen;
END_RCPP
}
// get_capacity_
int get_capacity_(SEXP sim_, const std::string& name);
RcppExport SEXP _simmer_get_capacity_(SEXP sim_SEXP, SEXP nameSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type sim_(sim_SEXP);
    Rcpp::traits::input_parameter< const std::string& >::type name(nameSEXP);
    rcpp_result_gen = Rcpp::wrap(get_capacity_(sim_, name));
    return rcpp_result_gen;
END_RCPP
}
// get_capacity_selected_
int get_capacity_selected_(SEXP sim_, int id);
RcppExport SEXP _simmer_get_capacity_selected_(SEXP sim_SEXP, SEXP idSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type sim_(sim_SEXP);
    Rcpp::traits::input_parameter< int >::type id(idSEXP);
    rcpp_result_gen = Rcpp::wrap(get_capacity_selected_(sim_, id));
    return rcpp_result_gen;
END_RCPP
}
// get_queue_size_
int get_queue_size_(SEXP sim_, const std::string& name);
RcppExport SEXP _simmer_get_queue_size_(SEXP sim_SEXP, SEXP nameSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type sim_(sim_SEXP);
    Rcpp::traits::input_parameter< const std::string& >::type name(nameSEXP);
    rcpp_result_gen = Rcpp::wrap(get_queue_size_(sim_, name));
    return rcpp_result_gen;
END_RCPP
}
// get_queue_size_selected_
int get_queue_size_selected_(SEXP sim_, int id);
RcppExport SEXP _simmer_get_queue_size_selected_(SEXP sim_SEXP, SEXP idSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type sim_(sim_SEXP);
    Rcpp::traits::input_parameter< int >::type id(idSEXP);
    rcpp_result_gen = Rcpp::wrap(get_queue_size_selected_(sim_, id));
    return rcpp_result_gen;
END_RCPP
}
// get_server_count_
int get_server_count_(SEXP sim_, const std::string& name);
RcppExport SEXP _simmer_get_server_count_(SEXP sim_SEXP, SEXP nameSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type sim_(sim_SEXP);
    Rcpp::traits::input_parameter< const std::string& >::type name(nameSEXP);
    rcpp_result_gen = Rcpp::wrap(get_server_count_(sim_, name));
    return rcpp_result_gen;
END_RCPP
}
// get_server_count_selected_
int get_server_count_selected_(SEXP sim_, int id);
RcppExport SEXP _simmer_get_server_count_selected_(SEXP sim_SEXP, SEXP idSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type sim_(sim_SEXP);
    Rcpp::traits::input_parameter< int >::type id(idSEXP);
    rcpp_result_gen = Rcpp::wrap(get_server_count_selected_(sim_, id));
    return rcpp_result_gen;
END_RCPP
}
// get_queue_count_
int get_queue_count_(SEXP sim_, const std::string& name);
RcppExport SEXP _simmer_get_queue_count_(SEXP sim_SEXP, SEXP nameSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type sim_(sim_SEXP);
    Rcpp::traits::input_parameter< const std::string& >::type name(nameSEXP);
    rcpp_result_gen = Rcpp::wrap(get_queue_count_(sim_, name));
    return rcpp_result_gen;
END_RCPP
}
// get_queue_count_selected_
int get_queue_count_selected_(SEXP sim_, int id);
RcppExport SEXP _simmer_get_queue_count_selected_(SEXP sim_SEXP, SEXP idSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type sim_(sim_SEXP);
    Rcpp::traits::input_parameter< int >::type id(idSEXP);
    rcpp_result_gen = Rcpp::wrap(get_queue_count_selected_(sim_, id));
    return rcpp_result_gen;
END_RCPP
}
// Seize__new
SEXP Seize__new(const std::string& resource, int amount, std::vector<bool> cont, const std::vector<Environment>& trj, unsigned short mask);
RcppExport SEXP _simmer_Seize__new(SEXP resourceSEXP, SEXP amountSEXP, SEXP contSEXP, SEXP trjSEXP, SEXP maskSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::string& >::type resource(resourceSEXP);
    Rcpp::traits::input_parameter< int >::type amount(amountSEXP);
    Rcpp::traits::input_parameter< std::vector<bool> >::type cont(contSEXP);
    Rcpp::traits::input_parameter< const std::vector<Environment>& >::type trj(trjSEXP);
    Rcpp::traits::input_parameter< unsigned short >::type mask(maskSEXP);
    rcpp_result_gen = Rcpp::wrap(Seize__new(resource, amount, cont, trj, mask));
    return rcpp_result_gen;
END_RCPP
}
// Seize__new_func
SEXP Seize__new_func(const std::string& resource, const Function& amount, std::vector<bool> cont, const std::vector<Environment>& trj, unsigned short mask);
RcppExport SEXP _simmer_Seize__new_func(SEXP resourceSEXP, SEXP amountSEXP, SEXP contSEXP, SEXP trjSEXP, SEXP maskSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::string& >::type resource(resourceSEXP);
    Rcpp::traits::input_parameter< const Function& >::type amount(amountSEXP);
    Rcpp::traits::input_parameter< std::vector<bool> >::type cont(contSEXP);
    Rcpp::traits::input_parameter< const std::vector<Environment>& >::type trj(trjSEXP);
    Rcpp::traits::input_parameter< unsigned short >::type mask(maskSEXP);
    rcpp_result_gen = Rcpp::wrap(Seize__new_func(resource, amount, cont, trj, mask));
    return rcpp_result_gen;
END_RCPP
}
// SeizeSelected__new
SEXP SeizeSelected__new(int id, int amount, std::vector<bool> cont, const std::vector<Environment>& trj, unsigned short mask);
RcppExport SEXP _simmer_SeizeSelected__new(SEXP idSEXP, SEXP amountSEXP, SEXP contSEXP, SEXP trjSEXP, SEXP maskSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type id(idSEXP);
    Rcpp::traits::input_parameter< int >::type amount(amountSEXP);
    Rcpp::traits::input_parameter< std::vector<bool> >::type cont(contSEXP);
    Rcpp::traits::input_parameter< const std::vector<Environment>& >::type trj(trjSEXP);
    Rcpp::traits::input_parameter< unsigned short >::type mask(maskSEXP);
    rcpp_result_gen = Rcpp::wrap(SeizeSelected__new(id, amount, cont, trj, mask));
    return rcpp_result_gen;
END_RCPP
}
// SeizeSelected__new_func
SEXP SeizeSelected__new_func(int id, const Function& amount, std::vector<bool> cont, const std::vector<Environment>& trj, unsigned short mask);
RcppExport SEXP _simmer_SeizeSelected__new_func(SEXP idSEXP, SEXP amountSEXP, SEXP contSEXP, SEXP trjSEXP, SEXP maskSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type id(idSEXP);
    Rcpp::traits::input_parameter< const Function& >::type amount(amountSEXP);
    Rcpp::traits::input_parameter< std::vector<bool> >::type cont(contSEXP);
    Rcpp::traits::input_parameter< const std::vector<Environment>& >::type trj(trjSEXP);
    Rcpp::traits::input_parameter< unsigned short >::type mask(maskSEXP);
    rcpp_result_gen = Rcpp::wrap(SeizeSelected__new_func(id, amount, cont, trj, mask));
    return rcpp_result_gen;
END_RCPP
}
// Release__new
SEXP Release__new(const std::string& resource, int amount);
RcppExport SEXP _simmer_Release__new(SEXP resourceSEXP, SEXP amountSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::string& >::type resource(resourceSEXP);
    Rcpp::traits::input_parameter< int >::type amount(amountSEXP);
    rcpp_result_gen = Rcpp::wrap(Release__new(resource, amount));
    return rcpp_result_gen;
END_RCPP
}
// Release__new_func
SEXP Release__new_func(const std::string& resource, const Function& amount);
RcppExport SEXP _simmer_Release__new_func(SEXP resourceSEXP, SEXP amountSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::string& >::type resource(resourceSEXP);
    Rcpp::traits::input_parameter< const Function& >::type amount(amountSEXP);
    rcpp_result_gen = Rcpp::wrap(Release__new_func(resource, amount));
    return rcpp_result_gen;
END_RCPP
}
// ReleaseSelected__new
SEXP ReleaseSelected__new(int id, int amount);
RcppExport SEXP _simmer_ReleaseSelected__new(SEXP idSEXP, SEXP amountSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type id(idSEXP);
    Rcpp::traits::input_parameter< int >::type amount(amountSEXP);
    rcpp_result_gen = Rcpp::wrap(ReleaseSelected__new(id, amount));
    return rcpp_result_gen;
END_RCPP
}
// ReleaseSelected__new_func
SEXP ReleaseSelected__new_func(int id, const Function& amount);
RcppExport SEXP _simmer_ReleaseSelected__new_func(SEXP idSEXP, SEXP amountSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type id(idSEXP);
    Rcpp::traits::input_parameter< const Function& >::type amount(amountSEXP);
    rcpp_result_gen = Rcpp::wrap(ReleaseSelected__new_func(id, amount));
    return rcpp_result_gen;
END_RCPP
}
// SetCapacity__new
SEXP SetCapacity__new(const std::string& resource, double value, char mod);
RcppExport SEXP _simmer_SetCapacity__new(SEXP resourceSEXP, SEXP valueSEXP, SEXP modSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::string& >::type resource(resourceSEXP);
    Rcpp::traits::input_parameter< double >::type value(valueSEXP);
    Rcpp::traits::input_parameter< char >::type mod(modSEXP);
    rcpp_result_gen = Rcpp::wrap(SetCapacity__new(resource, value, mod));
    return rcpp_result_gen;
END_RCPP
}
// SetCapacity__new_func
SEXP SetCapacity__new_func(const std::string& resource, const Function& value, char mod);
RcppExport SEXP _simmer_SetCapacity__new_func(SEXP resourceSEXP, SEXP valueSEXP, SEXP modSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::string& >::type resource(resourceSEXP);
    Rcpp::traits::input_parameter< const Function& >::type value(valueSEXP);
    Rcpp::traits::input_parameter< char >::type mod(modSEXP);
    rcpp_result_gen = Rcpp::wrap(SetCapacity__new_func(resource, value, mod));
    return rcpp_result_gen;
END_RCPP
}
// SetCapacitySelected__new
SEXP SetCapacitySelected__new(int id, double value, char mod);
RcppExport SEXP _simmer_SetCapacitySelected__new(SEXP idSEXP, SEXP valueSEXP, SEXP modSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type id(idSEXP);
    Rcpp::traits::input_parameter< double >::type value(valueSEXP);
    Rcpp::traits::input_parameter< char >::type mod(modSEXP);
    rcpp_result_gen = Rcpp::wrap(SetCapacitySelected__new(id, value, mod));
    return rcpp_result_gen;
END_RCPP
}
// SetCapacitySelected__new_func
SEXP SetCapacitySelected__new_func(int id, const Function& value, char mod);
RcppExport SEXP _simmer_SetCapacitySelected__new_func(SEXP idSEXP, SEXP valueSEXP, SEXP modSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type id(idSEXP);
    Rcpp::traits::input_parameter< const Function& >::type value(valueSEXP);
    Rcpp::traits::input_parameter< char >::type mod(modSEXP);
    rcpp_result_gen = Rcpp::wrap(SetCapacitySelected__new_func(id, value, mod));
    return rcpp_result_gen;
END_RCPP
}
// SetQueue__new
SEXP SetQueue__new(const std::string& resource, double value, char mod);
RcppExport SEXP _simmer_SetQueue__new(SEXP resourceSEXP, SEXP valueSEXP, SEXP modSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::string& >::type resource(resourceSEXP);
    Rcpp::traits::input_parameter< double >::type value(valueSEXP);
    Rcpp::traits::input_parameter< char >::type mod(modSEXP);
    rcpp_result_gen = Rcpp::wrap(SetQueue__new(resource, value, mod));
    return rcpp_result_gen;
END_RCPP
}
// SetQueue__new_func
SEXP SetQueue__new_func(const std::string& resource, const Function& value, char mod);
RcppExport SEXP _simmer_SetQueue__new_func(SEXP resourceSEXP, SEXP valueSEXP, SEXP modSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::string& >::type resource(resourceSEXP);
    Rcpp::traits::input_parameter< const Function& >::type value(valueSEXP);
    Rcpp::traits::input_parameter< char >::type mod(modSEXP);
    rcpp_result_gen = Rcpp::wrap(SetQueue__new_func(resource, value, mod));
    return rcpp_result_gen;
END_RCPP
}
// SetQueueSelected__new
SEXP SetQueueSelected__new(int id, double value, char mod);
RcppExport SEXP _simmer_SetQueueSelected__new(SEXP idSEXP, SEXP valueSEXP, SEXP modSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type id(idSEXP);
    Rcpp::traits::input_parameter< double >::type value(valueSEXP);
    Rcpp::traits::input_parameter< char >::type mod(modSEXP);
    rcpp_result_gen = Rcpp::wrap(SetQueueSelected__new(id, value, mod));
    return rcpp_result_gen;
END_RCPP
}
// SetQueueSelected__new_func
SEXP SetQueueSelected__new_func(int id, const Function& value, char mod);
RcppExport SEXP _simmer_SetQueueSelected__new_func(SEXP idSEXP, SEXP valueSEXP, SEXP modSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type id(idSEXP);
    Rcpp::traits::input_parameter< const Function& >::type value(valueSEXP);
    Rcpp::traits::input_parameter< char >::type mod(modSEXP);
    rcpp_result_gen = Rcpp::wrap(SetQueueSelected__new_func(id, value, mod));
    return rcpp_result_gen;
END_RCPP
}
// Select__new
SEXP Select__new(const std::vector<std::string>& resources, const std::string& policy, int id);
RcppExport SEXP _simmer_Select__new(SEXP resourcesSEXP, SEXP policySEXP, SEXP idSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::vector<std::string>& >::type resources(resourcesSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type policy(policySEXP);
    Rcpp::traits::input_parameter< int >::type id(idSEXP);
    rcpp_result_gen = Rcpp::wrap(Select__new(resources, policy, id));
    return rcpp_result_gen;
END_RCPP
}
// Select__new_func
SEXP Select__new_func(const Function& resources, const std::string& policy, int id);
RcppExport SEXP _simmer_Select__new_func(SEXP resourcesSEXP, SEXP policySEXP, SEXP idSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Function& >::type resources(resourcesSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type policy(policySEXP);
    Rcpp::traits::input_parameter< int >::type id(idSEXP);
    rcpp_result_gen = Rcpp::wrap(Select__new_func(resources, policy, id));
    return rcpp_result_gen;
END_RCPP
}
// SetAttribute__new
SEXP SetAttribute__new(const std::vector<std::string>& keys, const std::vector<double>& values, bool global, char mod);
RcppExport SEXP _simmer_SetAttribute__new(SEXP keysSEXP, SEXP valuesSEXP, SEXP globalSEXP, SEXP modSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::vector<std::string>& >::type keys(keysSEXP);
    Rcpp::traits::input_parameter< const std::vector<double>& >::type values(valuesSEXP);
    Rcpp::traits::input_parameter< bool >::type global(globalSEXP);
    Rcpp::traits::input_parameter< char >::type mod(modSEXP);
    rcpp_result_gen = Rcpp::wrap(SetAttribute__new(keys, values, global, mod));
    return rcpp_result_gen;
END_RCPP
}
// SetAttribute__new_func1
SEXP SetAttribute__new_func1(const Function& keys, const std::vector<double>& values, bool global, char mod);
RcppExport SEXP _simmer_SetAttribute__new_func1(SEXP keysSEXP, SEXP valuesSEXP, SEXP globalSEXP, SEXP modSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Function& >::type keys(keysSEXP);
    Rcpp::traits::input_parameter< const std::vector<double>& >::type values(valuesSEXP);
    Rcpp::traits::input_parameter< bool >::type global(globalSEXP);
    Rcpp::traits::input_parameter< char >::type mod(modSEXP);
    rcpp_result_gen = Rcpp::wrap(SetAttribute__new_func1(keys, values, global, mod));
    return rcpp_result_gen;
END_RCPP
}
// SetAttribute__new_func2
SEXP SetAttribute__new_func2(const std::vector<std::string>& keys, const Function& values, bool global, char mod);
RcppExport SEXP _simmer_SetAttribute__new_func2(SEXP keysSEXP, SEXP valuesSEXP, SEXP globalSEXP, SEXP modSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::vector<std::string>& >::type keys(keysSEXP);
    Rcpp::traits::input_parameter< const Function& >::type values(valuesSEXP);
    Rcpp::traits::input_parameter< bool >::type global(globalSEXP);
    Rcpp::traits::input_parameter< char >::type mod(modSEXP);
    rcpp_result_gen = Rcpp::wrap(SetAttribute__new_func2(keys, values, global, mod));
    return rcpp_result_gen;
END_RCPP
}
// SetAttribute__new_func3
SEXP SetAttribute__new_func3(const Function& keys, const Function& values, bool global, char mod);
RcppExport SEXP _simmer_SetAttribute__new_func3(SEXP keysSEXP, SEXP valuesSEXP, SEXP globalSEXP, SEXP modSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Function& >::type keys(keysSEXP);
    Rcpp::traits::input_parameter< const Function& >::type values(valuesSEXP);
    Rcpp::traits::input_parameter< bool >::type global(globalSEXP);
    Rcpp::traits::input_parameter< char >::type mod(modSEXP);
    rcpp_result_gen = Rcpp::wrap(SetAttribute__new_func3(keys, values, global, mod));
    return rcpp_result_gen;
END_RCPP
}
// Activate__new
SEXP Activate__new(const std::string& generator);
RcppExport SEXP _simmer_Activate__new(SEXP generatorSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::string& >::type generator(generatorSEXP);
    rcpp_result_gen = Rcpp::wrap(Activate__new(generator));
    return rcpp_result_gen;
END_RCPP
}
// Activate__new_func
SEXP Activate__new_func(const Function& generator);
RcppExport SEXP _simmer_Activate__new_func(SEXP generatorSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Function& >::type generator(generatorSEXP);
    rcpp_result_gen = Rcpp::wrap(Activate__new_func(generator));
    return rcpp_result_gen;
END_RCPP
}
// Deactivate__new
SEXP Deactivate__new(const std::string& generator);
RcppExport SEXP _simmer_Deactivate__new(SEXP generatorSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::string& >::type generator(generatorSEXP);
    rcpp_result_gen = Rcpp::wrap(Deactivate__new(generator));
    return rcpp_result_gen;
END_RCPP
}
// Deactivate__new_func
SEXP Deactivate__new_func(const Function& generator);
RcppExport SEXP _simmer_Deactivate__new_func(SEXP generatorSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Function& >::type generator(generatorSEXP);
    rcpp_result_gen = Rcpp::wrap(Deactivate__new_func(generator));
    return rcpp_result_gen;
END_RCPP
}
// SetTraj__new
SEXP SetTraj__new(const std::string& generator, const Environment& trj);
RcppExport SEXP _simmer_SetTraj__new(SEXP generatorSEXP, SEXP trjSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::string& >::type generator(generatorSEXP);
    Rcpp::traits::input_parameter< const Environment& >::type trj(trjSEXP);
    rcpp_result_gen = Rcpp::wrap(SetTraj__new(generator, trj));
    return rcpp_result_gen;
END_RCPP
}
// SetTraj__new_func
SEXP SetTraj__new_func(const Function& generator, const Environment& trj);
RcppExport SEXP _simmer_SetTraj__new_func(SEXP generatorSEXP, SEXP trjSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Function& >::type generator(generatorSEXP);
    Rcpp::traits::input_parameter< const Environment& >::type trj(trjSEXP);
    rcpp_result_gen = Rcpp::wrap(SetTraj__new_func(generator, trj));
    return rcpp_result_gen;
END_RCPP
}
// SetDist__new
SEXP SetDist__new(const std::string& generator, const Function& dist);
RcppExport SEXP _simmer_SetDist__new(SEXP generatorSEXP, SEXP distSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::string& >::type generator(generatorSEXP);
    Rcpp::traits::input_parameter< const Function& >::type dist(distSEXP);
    rcpp_result_gen = Rcpp::wrap(SetDist__new(generator, dist));
    return rcpp_result_gen;
END_RCPP
}
// SetDist__new_func
SEXP SetDist__new_func(const Function& generator, const Function& dist);
RcppExport SEXP _simmer_SetDist__new_func(SEXP generatorSEXP, SEXP distSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Function& >::type generator(generatorSEXP);
    Rcpp::traits::input_parameter< const Function& >::type dist(distSEXP);
    rcpp_result_gen = Rcpp::wrap(SetDist__new_func(generator, dist));
    return rcpp_result_gen;
END_RCPP
}
// SetPrior__new
SEXP SetPrior__new(const std::vector<int>& values, char mod);
RcppExport SEXP _simmer_SetPrior__new(SEXP valuesSEXP, SEXP modSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::vector<int>& >::type values(valuesSEXP);
    Rcpp::traits::input_parameter< char >::type mod(modSEXP);
    rcpp_result_gen = Rcpp::wrap(SetPrior__new(values, mod));
    return rcpp_result_gen;
END_RCPP
}
// SetPrior__new_func
SEXP SetPrior__new_func(const Function& values, char mod);
RcppExport SEXP _simmer_SetPrior__new_func(SEXP valuesSEXP, SEXP modSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Function& >::type values(valuesSEXP);
    Rcpp::traits::input_parameter< char >::type mod(modSEXP);
    rcpp_result_gen = Rcpp::wrap(SetPrior__new_func(values, mod));
    return rcpp_result_gen;
END_RCPP
}
// Timeout__new
SEXP Timeout__new(double delay);
RcppExport SEXP _simmer_Timeout__new(SEXP delaySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type delay(delaySEXP);
    rcpp_result_gen = Rcpp::wrap(Timeout__new(delay));
    return rcpp_result_gen;
END_RCPP
}
// Timeout__new_func
SEXP Timeout__new_func(const Function& task);
RcppExport SEXP _simmer_Timeout__new_func(SEXP taskSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Function& >::type task(taskSEXP);
    rcpp_result_gen = Rcpp::wrap(Timeout__new_func(task));
    return rcpp_result_gen;
END_RCPP
}
// Timeout__new_attr
SEXP Timeout__new_attr(const std::string& key, bool global);
RcppExport SEXP _simmer_Timeout__new_attr(SEXP keySEXP, SEXP globalSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::string& >::type key(keySEXP);
    Rcpp::traits::input_parameter< bool >::type global(globalSEXP);
    rcpp_result_gen = Rcpp::wrap(Timeout__new_attr(key, global));
    return rcpp_result_gen;
END_RCPP
}
// Branch__new
SEXP Branch__new(const Function& option, std::vector<bool> cont, const std::vector<Environment>& trj);
RcppExport SEXP _simmer_Branch__new(SEXP optionSEXP, SEXP contSEXP, SEXP trjSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Function& >::type option(optionSEXP);
    Rcpp::traits::input_parameter< std::vector<bool> >::type cont(contSEXP);
    Rcpp::traits::input_parameter< const std::vector<Environment>& >::type trj(trjSEXP);
    rcpp_result_gen = Rcpp::wrap(Branch__new(option, cont, trj));
    return rcpp_result_gen;
END_RCPP
}
// Rollback__new
SEXP Rollback__new(int amount, int times);
RcppExport SEXP _simmer_Rollback__new(SEXP amountSEXP, SEXP timesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type amount(amountSEXP);
    Rcpp::traits::input_parameter< int >::type times(timesSEXP);
    rcpp_result_gen = Rcpp::wrap(Rollback__new(amount, times));
    return rcpp_result_gen;
END_RCPP
}
// Rollback__new_func
SEXP Rollback__new_func(int amount, const Function& check);
RcppExport SEXP _simmer_Rollback__new_func(SEXP amountSEXP, SEXP checkSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type amount(amountSEXP);
    Rcpp::traits::input_parameter< const Function& >::type check(checkSEXP);
    rcpp_result_gen = Rcpp::wrap(Rollback__new_func(amount, check));
    return rcpp_result_gen;
END_RCPP
}
// Leave__new
SEXP Leave__new(double prob);
RcppExport SEXP _simmer_Leave__new(SEXP probSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type prob(probSEXP);
    rcpp_result_gen = Rcpp::wrap(Leave__new(prob));
    return rcpp_result_gen;
END_RCPP
}
// Leave__new_func
SEXP Leave__new_func(const Function& prob);
RcppExport SEXP _simmer_Leave__new_func(SEXP probSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Function& >::type prob(probSEXP);
    rcpp_result_gen = Rcpp::wrap(Leave__new_func(prob));
    return rcpp_result_gen;
END_RCPP
}
// Clone__new
SEXP Clone__new(int n, const std::vector<Environment>& trj);
RcppExport SEXP _simmer_Clone__new(SEXP nSEXP, SEXP trjSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< const std::vector<Environment>& >::type trj(trjSEXP);
    rcpp_result_gen = Rcpp::wrap(Clone__new(n, trj));
    return rcpp_result_gen;
END_RCPP
}
// Clone__new_func
SEXP Clone__new_func(const Function& n, const std::vector<Environment>& trj);
RcppExport SEXP _simmer_Clone__new_func(SEXP nSEXP, SEXP trjSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Function& >::type n(nSEXP);
    Rcpp::traits::input_parameter< const std::vector<Environment>& >::type trj(trjSEXP);
    rcpp_result_gen = Rcpp::wrap(Clone__new_func(n, trj));
    return rcpp_result_gen;
END_RCPP
}
// Synchronize__new
SEXP Synchronize__new(bool wait, bool terminate);
RcppExport SEXP _simmer_Synchronize__new(SEXP waitSEXP, SEXP terminateSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< bool >::type wait(waitSEXP);
    Rcpp::traits::input_parameter< bool >::type terminate(terminateSEXP);
    rcpp_result_gen = Rcpp::wrap(Synchronize__new(wait, terminate));
    return rcpp_result_gen;
END_RCPP
}
// Batch__new
SEXP Batch__new(int n, double timeout, bool permanent, const std::string& name);
RcppExport SEXP _simmer_Batch__new(SEXP nSEXP, SEXP timeoutSEXP, SEXP permanentSEXP, SEXP nameSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< double >::type timeout(timeoutSEXP);
    Rcpp::traits::input_parameter< bool >::type permanent(permanentSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type name(nameSEXP);
    rcpp_result_gen = Rcpp::wrap(Batch__new(n, timeout, permanent, name));
    return rcpp_result_gen;
END_RCPP
}
// Batch__new_func1
SEXP Batch__new_func1(int n, const Function& timeout, bool permanent, const std::string& name);
RcppExport SEXP _simmer_Batch__new_func1(SEXP nSEXP, SEXP timeoutSEXP, SEXP permanentSEXP, SEXP nameSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< const Function& >::type timeout(timeoutSEXP);
    Rcpp::traits::input_parameter< bool >::type permanent(permanentSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type name(nameSEXP);
    rcpp_result_gen = Rcpp::wrap(Batch__new_func1(n, timeout, permanent, name));
    return rcpp_result_gen;
END_RCPP
}
// Batch__new_func2
SEXP Batch__new_func2(int n, double timeout, bool permanent, const std::string& name, const Function& rule);
RcppExport SEXP _simmer_Batch__new_func2(SEXP nSEXP, SEXP timeoutSEXP, SEXP permanentSEXP, SEXP nameSEXP, SEXP ruleSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< double >::type timeout(timeoutSEXP);
    Rcpp::traits::input_parameter< bool >::type permanent(permanentSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type name(nameSEXP);
    Rcpp::traits::input_parameter< const Function& >::type rule(ruleSEXP);
    rcpp_result_gen = Rcpp::wrap(Batch__new_func2(n, timeout, permanent, name, rule));
    return rcpp_result_gen;
END_RCPP
}
// Batch__new_func3
SEXP Batch__new_func3(int n, const Function& timeout, bool permanent, const std::string& name, const Function& rule);
RcppExport SEXP _simmer_Batch__new_func3(SEXP nSEXP, SEXP timeoutSEXP, SEXP permanentSEXP, SEXP nameSEXP, SEXP ruleSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< const Function& >::type timeout(timeoutSEXP);
    Rcpp::traits::input_parameter< bool >::type permanent(permanentSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type name(nameSEXP);
    Rcpp::traits::input_parameter< const Function& >::type rule(ruleSEXP);
    rcpp_result_gen = Rcpp::wrap(Batch__new_func3(n, timeout, permanent, name, rule));
    return rcpp_result_gen;
END_RCPP
}
// Separate__new
SEXP Separate__new();
RcppExport SEXP _simmer_Separate__new() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(Separate__new());
    return rcpp_result_gen;
END_RCPP
}
// RenegeIn__new
SEXP RenegeIn__new(double t, const std::vector<Environment>& trj);
RcppExport SEXP _simmer_RenegeIn__new(SEXP tSEXP, SEXP trjSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type t(tSEXP);
    Rcpp::traits::input_parameter< const std::vector<Environment>& >::type trj(trjSEXP);
    rcpp_result_gen = Rcpp::wrap(RenegeIn__new(t, trj));
    return rcpp_result_gen;
END_RCPP
}
// RenegeIn__new_func
SEXP RenegeIn__new_func(const Function& t, const std::vector<Environment>& trj);
RcppExport SEXP _simmer_RenegeIn__new_func(SEXP tSEXP, SEXP trjSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Function& >::type t(tSEXP);
    Rcpp::traits::input_parameter< const std::vector<Environment>& >::type trj(trjSEXP);
    rcpp_result_gen = Rcpp::wrap(RenegeIn__new_func(t, trj));
    return rcpp_result_gen;
END_RCPP
}
// RenegeIf__new
SEXP RenegeIf__new(const std::string& signal, const std::vector<Environment>& trj);
RcppExport SEXP _simmer_RenegeIf__new(SEXP signalSEXP, SEXP trjSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::string& >::type signal(signalSEXP);
    Rcpp::traits::input_parameter< const std::vector<Environment>& >::type trj(trjSEXP);
    rcpp_result_gen = Rcpp::wrap(RenegeIf__new(signal, trj));
    return rcpp_result_gen;
END_RCPP
}
// RenegeIf__new_func
SEXP RenegeIf__new_func(const Function& signal, const std::vector<Environment>& trj);
RcppExport SEXP _simmer_RenegeIf__new_func(SEXP signalSEXP, SEXP trjSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Function& >::type signal(signalSEXP);
    Rcpp::traits::input_parameter< const std::vector<Environment>& >::type trj(trjSEXP);
    rcpp_result_gen = Rcpp::wrap(RenegeIf__new_func(signal, trj));
    return rcpp_result_gen;
END_RCPP
}
// RenegeAbort__new
SEXP RenegeAbort__new();
RcppExport SEXP _simmer_RenegeAbort__new() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(RenegeAbort__new());
    return rcpp_result_gen;
END_RCPP
}
// Send__new
SEXP Send__new(const std::vector<std::string>& signals, double delay);
RcppExport SEXP _simmer_Send__new(SEXP signalsSEXP, SEXP delaySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::vector<std::string>& >::type signals(signalsSEXP);
    Rcpp::traits::input_parameter< double >::type delay(delaySEXP);
    rcpp_result_gen = Rcpp::wrap(Send__new(signals, delay));
    return rcpp_result_gen;
END_RCPP
}
// Send__new_func1
SEXP Send__new_func1(const Function& signals, double delay);
RcppExport SEXP _simmer_Send__new_func1(SEXP signalsSEXP, SEXP delaySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Function& >::type signals(signalsSEXP);
    Rcpp::traits::input_parameter< double >::type delay(delaySEXP);
    rcpp_result_gen = Rcpp::wrap(Send__new_func1(signals, delay));
    return rcpp_result_gen;
END_RCPP
}
// Send__new_func2
SEXP Send__new_func2(const std::vector<std::string>& signals, const Function& delay);
RcppExport SEXP _simmer_Send__new_func2(SEXP signalsSEXP, SEXP delaySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::vector<std::string>& >::type signals(signalsSEXP);
    Rcpp::traits::input_parameter< const Function& >::type delay(delaySEXP);
    rcpp_result_gen = Rcpp::wrap(Send__new_func2(signals, delay));
    return rcpp_result_gen;
END_RCPP
}
// Send__new_func3
SEXP Send__new_func3(const Function& signals, const Function& delay);
RcppExport SEXP _simmer_Send__new_func3(SEXP signalsSEXP, SEXP delaySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Function& >::type signals(signalsSEXP);
    Rcpp::traits::input_parameter< const Function& >::type delay(delaySEXP);
    rcpp_result_gen = Rcpp::wrap(Send__new_func3(signals, delay));
    return rcpp_result_gen;
END_RCPP
}
// Trap__new
SEXP Trap__new(const std::vector<std::string>& signals, const std::vector<Environment>& trj, bool interruptible);
RcppExport SEXP _simmer_Trap__new(SEXP signalsSEXP, SEXP trjSEXP, SEXP interruptibleSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::vector<std::string>& >::type signals(signalsSEXP);
    Rcpp::traits::input_parameter< const std::vector<Environment>& >::type trj(trjSEXP);
    Rcpp::traits::input_parameter< bool >::type interruptible(interruptibleSEXP);
    rcpp_result_gen = Rcpp::wrap(Trap__new(signals, trj, interruptible));
    return rcpp_result_gen;
END_RCPP
}
// Trap__new_func
SEXP Trap__new_func(const Function& signals, const std::vector<Environment>& trj, bool interruptible);
RcppExport SEXP _simmer_Trap__new_func(SEXP signalsSEXP, SEXP trjSEXP, SEXP interruptibleSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Function& >::type signals(signalsSEXP);
    Rcpp::traits::input_parameter< const std::vector<Environment>& >::type trj(trjSEXP);
    Rcpp::traits::input_parameter< bool >::type interruptible(interruptibleSEXP);
    rcpp_result_gen = Rcpp::wrap(Trap__new_func(signals, trj, interruptible));
    return rcpp_result_gen;
END_RCPP
}
// UnTrap__new
SEXP UnTrap__new(const std::vector<std::string>& signals);
RcppExport SEXP _simmer_UnTrap__new(SEXP signalsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::vector<std::string>& >::type signals(signalsSEXP);
    rcpp_result_gen = Rcpp::wrap(UnTrap__new(signals));
    return rcpp_result_gen;
END_RCPP
}
// UnTrap__new_func
SEXP UnTrap__new_func(const Function& signals);
RcppExport SEXP _simmer_UnTrap__new_func(SEXP signalsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Function& >::type signals(signalsSEXP);
    rcpp_result_gen = Rcpp::wrap(UnTrap__new_func(signals));
    return rcpp_result_gen;
END_RCPP
}
// Wait__new
SEXP Wait__new();
RcppExport SEXP _simmer_Wait__new() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(Wait__new());
    return rcpp_result_gen;
END_RCPP
}
// Log__new
SEXP Log__new(const std::string& message);
RcppExport SEXP _simmer_Log__new(SEXP messageSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::string& >::type message(messageSEXP);
    rcpp_result_gen = Rcpp::wrap(Log__new(message));
    return rcpp_result_gen;
END_RCPP
}
// Log__new_func
SEXP Log__new_func(const Function& message);
RcppExport SEXP _simmer_Log__new_func(SEXP messageSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Function& >::type message(messageSEXP);
    rcpp_result_gen = Rcpp::wrap(Log__new_func(message));
    return rcpp_result_gen;
END_RCPP
}
// activity_get_count_
int activity_get_count_(SEXP activity_);
RcppExport SEXP _simmer_activity_get_count_(SEXP activity_SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type activity_(activity_SEXP);
    rcpp_result_gen = Rcpp::wrap(activity_get_count_(activity_));
    return rcpp_result_gen;
END_RCPP
}
// activity_print_
void activity_print_(SEXP activity_, int indent, bool verbose);
RcppExport SEXP _simmer_activity_print_(SEXP activity_SEXP, SEXP indentSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type activity_(activity_SEXP);
    Rcpp::traits::input_parameter< int >::type indent(indentSEXP);
    Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP);
    activity_print_(activity_, indent, verbose);
    return R_NilValue;
END_RCPP
}
// activity_get_next_
SEXP activity_get_next_(SEXP activity_);
RcppExport SEXP _simmer_activity_get_next_(SEXP activity_SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type activity_(activity_SEXP);
    rcpp_result_gen = Rcpp::wrap(activity_get_next_(activity_));
    return rcpp_result_gen;
END_RCPP
}
// activity_get_prev_
SEXP activity_get_prev_(SEXP activity_);
RcppExport SEXP _simmer_activity_get_prev_(SEXP activity_SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type activity_(activity_SEXP);
    rcpp_result_gen = Rcpp::wrap(activity_get_prev_(activity_));
    return rcpp_result_gen;
END_RCPP
}
// activity_chain_
void activity_chain_(SEXP first_, SEXP second_);
RcppExport SEXP _simmer_activity_chain_(SEXP first_SEXP, SEXP second_SEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type first_(first_SEXP);
    Rcpp::traits::input_parameter< SEXP >::type second_(second_SEXP);
    activity_chain_(first_, second_);
    return R_NilValue;
END_RCPP
}
// activity_clone_
SEXP activity_clone_(SEXP activity_);
RcppExport SEXP _simmer_activity_clone_(SEXP activity_SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type activity_(activity_SEXP);
    rcpp_result_gen = Rcpp::wrap(activity_clone_(activity_));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_simmer_Simulator__new", (DL_FUNC) &_simmer_Simulator__new, 2},
    {"_simmer_reset_", (DL_FUNC) &_simmer_reset_, 1},
    {"_simmer_now_", (DL_FUNC) &_simmer_now_, 1},
    {"_simmer_peek_", (DL_FUNC) &_simmer_peek_, 2},
    {"_simmer_stepn_", (DL_FUNC) &_simmer_stepn_, 2},
    {"_simmer_run_", (DL_FUNC) &_simmer_run_, 2},
    {"_simmer_add_generator_", (DL_FUNC) &_simmer_add_generator_, 8},
    {"_simmer_add_resource_", (DL_FUNC) &_simmer_add_resource_, 8},
    {"_simmer_add_resource_manager_", (DL_FUNC) &_simmer_add_resource_manager_, 6},
    {"_simmer_get_mon_arrivals_", (DL_FUNC) &_simmer_get_mon_arrivals_, 3},
    {"_simmer_get_mon_attributes_", (DL_FUNC) &_simmer_get_mon_attributes_, 1},
    {"_simmer_get_mon_resources_", (DL_FUNC) &_simmer_get_mon_resources_, 1},
    {"_simmer_get_n_generated_", (DL_FUNC) &_simmer_get_n_generated_, 2},
    {"_simmer_get_name_", (DL_FUNC) &_simmer_get_name_, 1},
    {"_simmer_get_attribute_", (DL_FUNC) &_simmer_get_attribute_, 3},
    {"_simmer_get_prioritization_", (DL_FUNC) &_simmer_get_prioritization_, 1},
    {"_simmer_get_capacity_", (DL_FUNC) &_simmer_get_capacity_, 2},
    {"_simmer_get_capacity_selected_", (DL_FUNC) &_simmer_get_capacity_selected_, 2},
    {"_simmer_get_queue_size_", (DL_FUNC) &_simmer_get_queue_size_, 2},
    {"_simmer_get_queue_size_selected_", (DL_FUNC) &_simmer_get_queue_size_selected_, 2},
    {"_simmer_get_server_count_", (DL_FUNC) &_simmer_get_server_count_, 2},
    {"_simmer_get_server_count_selected_", (DL_FUNC) &_simmer_get_server_count_selected_, 2},
    {"_simmer_get_queue_count_", (DL_FUNC) &_simmer_get_queue_count_, 2},
    {"_simmer_get_queue_count_selected_", (DL_FUNC) &_simmer_get_queue_count_selected_, 2},
    {"_simmer_Seize__new", (DL_FUNC) &_simmer_Seize__new, 5},
    {"_simmer_Seize__new_func", (DL_FUNC) &_simmer_Seize__new_func, 5},
    {"_simmer_SeizeSelected__new", (DL_FUNC) &_simmer_SeizeSelected__new, 5},
    {"_simmer_SeizeSelected__new_func", (DL_FUNC) &_simmer_SeizeSelected__new_func, 5},
    {"_simmer_Release__new", (DL_FUNC) &_simmer_Release__new, 2},
    {"_simmer_Release__new_func", (DL_FUNC) &_simmer_Release__new_func, 2},
    {"_simmer_ReleaseSelected__new", (DL_FUNC) &_simmer_ReleaseSelected__new, 2},
    {"_simmer_ReleaseSelected__new_func", (DL_FUNC) &_simmer_ReleaseSelected__new_func, 2},
    {"_simmer_SetCapacity__new", (DL_FUNC) &_simmer_SetCapacity__new, 3},
    {"_simmer_SetCapacity__new_func", (DL_FUNC) &_simmer_SetCapacity__new_func, 3},
    {"_simmer_SetCapacitySelected__new", (DL_FUNC) &_simmer_SetCapacitySelected__new, 3},
    {"_simmer_SetCapacitySelected__new_func", (DL_FUNC) &_simmer_SetCapacitySelected__new_func, 3},
    {"_simmer_SetQueue__new", (DL_FUNC) &_simmer_SetQueue__new, 3},
    {"_simmer_SetQueue__new_func", (DL_FUNC) &_simmer_SetQueue__new_func, 3},
    {"_simmer_SetQueueSelected__new", (DL_FUNC) &_simmer_SetQueueSelected__new, 3},
    {"_simmer_SetQueueSelected__new_func", (DL_FUNC) &_simmer_SetQueueSelected__new_func, 3},
    {"_simmer_Select__new", (DL_FUNC) &_simmer_Select__new, 3},
    {"_simmer_Select__new_func", (DL_FUNC) &_simmer_Select__new_func, 3},
    {"_simmer_SetAttribute__new", (DL_FUNC) &_simmer_SetAttribute__new, 4},
    {"_simmer_SetAttribute__new_func1", (DL_FUNC) &_simmer_SetAttribute__new_func1, 4},
    {"_simmer_SetAttribute__new_func2", (DL_FUNC) &_simmer_SetAttribute__new_func2, 4},
    {"_simmer_SetAttribute__new_func3", (DL_FUNC) &_simmer_SetAttribute__new_func3, 4},
    {"_simmer_Activate__new", (DL_FUNC) &_simmer_Activate__new, 1},
    {"_simmer_Activate__new_func", (DL_FUNC) &_simmer_Activate__new_func, 1},
    {"_simmer_Deactivate__new", (DL_FUNC) &_simmer_Deactivate__new, 1},
    {"_simmer_Deactivate__new_func", (DL_FUNC) &_simmer_Deactivate__new_func, 1},
    {"_simmer_SetTraj__new", (DL_FUNC) &_simmer_SetTraj__new, 2},
    {"_simmer_SetTraj__new_func", (DL_FUNC) &_simmer_SetTraj__new_func, 2},
    {"_simmer_SetDist__new", (DL_FUNC) &_simmer_SetDist__new, 2},
    {"_simmer_SetDist__new_func", (DL_FUNC) &_simmer_SetDist__new_func, 2},
    {"_simmer_SetPrior__new", (DL_FUNC) &_simmer_SetPrior__new, 2},
    {"_simmer_SetPrior__new_func", (DL_FUNC) &_simmer_SetPrior__new_func, 2},
    {"_simmer_Timeout__new", (DL_FUNC) &_simmer_Timeout__new, 1},
    {"_simmer_Timeout__new_func", (DL_FUNC) &_simmer_Timeout__new_func, 1},
    {"_simmer_Timeout__new_attr", (DL_FUNC) &_simmer_Timeout__new_attr, 2},
    {"_simmer_Branch__new", (DL_FUNC) &_simmer_Branch__new, 3},
    {"_simmer_Rollback__new", (DL_FUNC) &_simmer_Rollback__new, 2},
    {"_simmer_Rollback__new_func", (DL_FUNC) &_simmer_Rollback__new_func, 2},
    {"_simmer_Leave__new", (DL_FUNC) &_simmer_Leave__new, 1},
    {"_simmer_Leave__new_func", (DL_FUNC) &_simmer_Leave__new_func, 1},
    {"_simmer_Clone__new", (DL_FUNC) &_simmer_Clone__new, 2},
    {"_simmer_Clone__new_func", (DL_FUNC) &_simmer_Clone__new_func, 2},
    {"_simmer_Synchronize__new", (DL_FUNC) &_simmer_Synchronize__new, 2},
    {"_simmer_Batch__new", (DL_FUNC) &_simmer_Batch__new, 4},
    {"_simmer_Batch__new_func1", (DL_FUNC) &_simmer_Batch__new_func1, 4},
    {"_simmer_Batch__new_func2", (DL_FUNC) &_simmer_Batch__new_func2, 5},
    {"_simmer_Batch__new_func3", (DL_FUNC) &_simmer_Batch__new_func3, 5},
    {"_simmer_Separate__new", (DL_FUNC) &_simmer_Separate__new, 0},
    {"_simmer_RenegeIn__new", (DL_FUNC) &_simmer_RenegeIn__new, 2},
    {"_simmer_RenegeIn__new_func", (DL_FUNC) &_simmer_RenegeIn__new_func, 2},
    {"_simmer_RenegeIf__new", (DL_FUNC) &_simmer_RenegeIf__new, 2},
    {"_simmer_RenegeIf__new_func", (DL_FUNC) &_simmer_RenegeIf__new_func, 2},
    {"_simmer_RenegeAbort__new", (DL_FUNC) &_simmer_RenegeAbort__new, 0},
    {"_simmer_Send__new", (DL_FUNC) &_simmer_Send__new, 2},
    {"_simmer_Send__new_func1", (DL_FUNC) &_simmer_Send__new_func1, 2},
    {"_simmer_Send__new_func2", (DL_FUNC) &_simmer_Send__new_func2, 2},
    {"_simmer_Send__new_func3", (DL_FUNC) &_simmer_Send__new_func3, 2},
    {"_simmer_Trap__new", (DL_FUNC) &_simmer_Trap__new, 3},
    {"_simmer_Trap__new_func", (DL_FUNC) &_simmer_Trap__new_func, 3},
    {"_simmer_UnTrap__new", (DL_FUNC) &_simmer_UnTrap__new, 1},
    {"_simmer_UnTrap__new_func", (DL_FUNC) &_simmer_UnTrap__new_func, 1},
    {"_simmer_Wait__new", (DL_FUNC) &_simmer_Wait__new, 0},
    {"_simmer_Log__new", (DL_FUNC) &_simmer_Log__new, 1},
    {"_simmer_Log__new_func", (DL_FUNC) &_simmer_Log__new_func, 1},
    {"_simmer_activity_get_count_", (DL_FUNC) &_simmer_activity_get_count_, 1},
    {"_simmer_activity_print_", (DL_FUNC) &_simmer_activity_print_, 3},
    {"_simmer_activity_get_next_", (DL_FUNC) &_simmer_activity_get_next_, 1},
    {"_simmer_activity_get_prev_", (DL_FUNC) &_simmer_activity_get_prev_, 1},
    {"_simmer_activity_chain_", (DL_FUNC) &_simmer_activity_chain_, 2},
    {"_simmer_activity_clone_", (DL_FUNC) &_simmer_activity_clone_, 1},
    {NULL, NULL, 0}
};

RcppExport void R_init_simmer(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
